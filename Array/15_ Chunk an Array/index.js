/**  Chunk an Array
 *
 * To "chunk" an array means to split it into smaller arrays of a specified size. For example,
 * given the array [1, 2, 3, 4, 5, 6] and chunk size 2, the output should be [[1, 2], [3, 4], [5, 6]].
 *
 */

function chunkArray(arr, size) {
  let box = [];
  for (let i = 0; i < arr.length; i += size) {
    box.push(arr.slice(i, i + size));
  }
  return box;
}
let arr = [1, 2, 3, 4, 5, 6];
let size = 2;
let res = chunkArray(arr, size);
console.log(res);

/** 
 * वास्तविक जीवन का उदाहरण:
मान लीजिए, आपके पास एक कपड़े की बेल्ट है जिसमें कई रंगीन बटन लगे हुए हैं, 
और आप इन बटन को छोटे-छोटे ग्रुप्स में बांटना चाहते हैं। प्रत्येक ग्रुप में एक निश्चित संख्या के बटन होंगे।

उदाहरण:

आपके पास बटन की एक लम्बी श्रृंखला है: [रंग1, रंग2, रंग3, रंग4, रंग5, रंग6]
आप चाहते हैं कि हर ग्रुप में 2 बटन हों।

कैसे काम करता है कोड:
शुरू करें:

पहले हम एक खाली result नामक सूची (array) बनाते हैं, जिसमें हम अंत में सभी ग्रुप्स को स्टोर करेंगे।
लूप के माध्यम से बटन बांटना:

i को 0 से शुरू करते हैं और हर बार size के अनुसार बढ़ाते हैं।
arr.slice(i, i + size) का मतलब है कि बटन की श्रृंखला से i से लेकर i + size तक के बटन निकालें।
उदाहरण के लिए, पहली बार जब i = 0, तो arr.slice(0, 2) [रंग1, रंग2] निकालेगा और इसे result में जोड़ देगा।
अगला ग्रुप:

फिर i को size बढ़ाकर 2 किया जाता है, अब arr.slice(2, 4) [रंग3, रंग4] निकालेगा और इसे result में जोड़ देगा।
इसी तरह, अंत में i = 4 होगा, और arr.slice(4, 6) [रंग5, रंग6] निकालेगा।
समाप्ति:

जब i पूरे बटन की श्रृंखला से आगे बढ़ जाता है, लूप समाप्त हो जाता है और result में सभी ग्रुप्स को देख सकते हैं।
संक्षेप में:
लूप: i की वैल्यू हर बार size के अनुसार बढ़ती है ताकि हम अलग-अलग ग्रुप्स बना सकें।
ग्रुप बनाना: arr.slice(i, i + size) से हम एक ग्रुप बनाते हैं और इसे result में जोड़ते हैं।
उदाहरण के अनुसार:

[रंग1, रंग2], [रंग3, रंग4], [रंग5, रंग6] ये ग्रुप्स आपके result में होंगे।
इस तरह से आप बटन को छोटे-छोटे ग्रुप्स में बांट सकते हैं, और कोड उसी प्रक्रिया को स्वचालित तरीके से करता है।
 */
